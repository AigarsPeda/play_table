// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite" // uncomment this line to use SQLite
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

model User {
  lastName                 String
  firstName                String
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  Password                 Password[]
  LoginToken               LoginToken[]
  Tournaments              Tournament[]
  PasswordReset            PasswordReset[]
  email                    String          @unique
  updatedAt                DateTime        @updatedAt
  createdAt                DateTime        @default(now())
  id                       String          @id @default(cuid())
}

model StripeEvent {
  id               String   @id @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}

enum TournamentType {
  KING
  TEAMS
}

// One user can have many Tournaments
model Tournament {
  setsInGame   Int
  team         Team[]
  name         String
  userId       String
  winner       String?
  games        Games[]
  teams        Participant[]
  playoffgames PlayoffGames[]
  updatedAt    DateTime       @updatedAt
  type         TournamentType @default(KING)
  createdAt    DateTime       @default(now())
  isPlayoff    Boolean        @default(false)
  id           String         @id @default(cuid())
  user         User           @relation(fields: [userId], references: [id])
}

model Participant {
  team           Team[]
  name           String
  tournamentId   String
  group          String
  games          Games[]
  playoffgames   PlayoffGames[]
  updatedAt      DateTime       @updatedAt
  points         Int            @default(0)
  smallPoints    Int            @default(0)
  createdAt      DateTime       @default(now())
  id             String         @id @default(cuid())
  gameswinners   Games[]        @relation("winners")
  playoffwinners PlayoffGames[] @relation("playoffwinners")
  tournament     Tournament     @relation(fields: [tournamentId], references: [id])
}

model Games {
  gameOrder    Int
  group        String
  tournamentId String
  team2Id      String
  team1Id      String
  team1Score   Int?
  team2Score   Int?
  participants Participant[]
  gameSet      Int           @default(1)
  id           String        @id @default(cuid())
  winners      Participant[] @relation("winners")
  tournament   Tournament    @relation(fields: [tournamentId], references: [id])
  team1        Team          @relation("participant_team_1", fields: [team1Id], references: [id], onDelete: Cascade)
  team2        Team          @relation("participant_team_2", fields: [team2Id], references: [id], onDelete: Cascade)
  gameSets     Json          @default("{}")
}

model PlayoffGames {
  tournamentId   String
  team2Id        String?
  team1Id        String?
  bracketNum     Int
  gameOrder      Int
  stage          String // <- 1/8, 1/4, 1/2, final
  team1Score     Int?
  team2Score     Int?
  participants   Participant[]
  gameSet        Int           @default(1)
  gameSets       Json          @default("{}")
  id             String        @id @default(cuid())
  playoffwinners Participant[] @relation("playoffwinners")
  tournament     Tournament    @relation(fields: [tournamentId], references: [id])
  team1          Team?         @relation("playoff_team_1", fields: [team1Id], references: [id], onDelete: Cascade)
  team2          Team?         @relation("playoff_team_2", fields: [team2Id], references: [id], onDelete: Cascade)
}

model Team {
  name         String
  group        String
  tournamentId String
  participants Participant[]
  updatedAt    DateTime       @updatedAt
  points       Int            @default(0)
  smallPoints  Int            @default(0)
  createdAt    DateTime       @default(now())
  id           String         @id @default(cuid())
  playoff      PlayoffGames[] @relation("playoff_team_1")
  playoff2     PlayoffGames[] @relation("playoff_team_2")
  games        Games[]        @relation("participant_team_1")
  games2       Games[]        @relation("participant_team_2")
  tournament   Tournament     @relation(fields: [tournamentId], references: [id])
}

// One user can have one password
model Password {
  password String
  userId   String @unique
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
}

// One user can have many login tokens
model LoginToken {
  userId    String
  token     String   @unique()
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
}

model PasswordReset {
  userId    String
  isActive  Boolean
  token     String   @unique()
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
}
