// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  credits       Int          @default(100)
  Tournament    Tournament[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum TournamentType {
  king
  teams
}

model Tournament {
  id        String         @id @default(cuid())
  userId    String
  type      TournamentType @default(king)
  name      String
  sets      Int
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  teams     Team[]
  games     Game[]
  players   Player[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Team {
  id           String     @id @default(cuid())
  tournamentId String
  name         String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  players      Player[]   @relation("TeamPlayers")
  teamOne      Game[]     @relation("teamOne")
  teamTwo      Game[]     @relation("teamTwo")
  winnerTeam   Game[]     @relation("winnerTeam")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  group        String     @default("A")
  points       Int        @default(0)
  setsWon      Int        @default(0)
  gamesWon     Int        @default(0)
}

model Player {
  id           String      @id @default(cuid())
  name         String
  teams        Team[]      @relation("TeamPlayers")
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  points       Int         @default(0)
  setsWon      Int         @default(0)
  gamesWon     Int         @default(0)
}

model Game {
  id              String     @id @default(cuid())
  teamOneSetScore Int        @default(0)
  teamTwoSetScore Int        @default(0)
  round           Int        @default(1)
  gameSets        Json       @default("{}")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  teamOneId       String
  teamOne         Team       @relation("teamOne", fields: [teamOneId], references: [id])
  teamTwoId       String
  teamTwo         Team       @relation("teamTwo", fields: [teamTwoId], references: [id])
  tournamentId    String
  tournament      Tournament @relation(fields: [tournamentId], references: [id])
  order           Int
  winnerId        String?
  winnerTeamId    Team?      @relation("winnerTeam", fields: [winnerId], references: [id])
}

model EmailList {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
