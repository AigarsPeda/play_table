// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite" // uncomment this line to use SQLite
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  firstName   String
  lastName    String
  Password    Password[]
  LoginToken  LoginToken[]
  Tournaments Tournament[]
  email       String       @unique
  updatedAt   DateTime     @updatedAt
  createdAt   DateTime     @default(now())
  id          String       @id @default(cuid())
}

enum TournamentType {
  KING
  TEAMS
}

// One user can have many Tournaments
model Tournament {
  Team      Team[]
  name      String
  userId    String
  winner    String?
  Games     Games[]
  teams     Participant[]
  updatedAt DateTime       @updatedAt
  type      TournamentType @default(KING)
  createdAt DateTime       @default(now())
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id])
}

model Participant {
  team         Team[]
  name         String
  tournamentId String
  group        String
  games        Games[]
  updatedAt    DateTime   @updatedAt
  score        Int        @default(0)
  createdAt    DateTime   @default(now())
  id           String     @id @default(cuid())
  games2       Games[]    @relation("winners")
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
}

model Games {
  gameOrder    Int
  group        String
  tournamentId String
  team2Id      String
  team1Id      String
  participants Participant[]
  team1Score   Int           @default(0)
  team2Score   Int           @default(0)
  id           String        @id @default(cuid())
  winners      Participant[] @relation("winners")
  tournament   Tournament    @relation(fields: [tournamentId], references: [id])
  team1        Team          @relation("participant_team_1", fields: [team1Id], references: [id], onDelete: Cascade)
  team2        Team          @relation("participant_team_2", fields: [team2Id], references: [id], onDelete: Cascade)
}

model Team {
  name         String
  tournamentId String
  participants Participant[]
  updatedAt    DateTime      @updatedAt
  createdAt    DateTime      @default(now())
  id           String        @id @default(cuid())
  games        Games[]       @relation("participant_team_1")
  games2       Games[]       @relation("participant_team_2")
  tournament   Tournament    @relation(fields: [tournamentId], references: [id])
}

// One user can have one password
model Password {
  password String
  userId   String @unique
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
}

// One user can have many login tokens
model LoginToken {
  userId    String
  token     String   @unique()
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
}
